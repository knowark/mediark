from functools import partial
from injectark import Injectark
from aiohttp import web
from .resource import Resource
from ..helpers import get_request_ids
from .....integration.core.http import HttpBase64Reader


class MediaResource(Resource):
    def __init__(self, injector: Injectark) -> None:
        self.informer = injector['StandardInformer']
        self.manager = injector['MediaStorageManager']

        super().__init__(
            self.informer.count,
            self.informer.search,
            None,
            None)
        model='Media'

    async def put(self, request: web.Request) -> web.Response:
        records = await request.json()
        streams = [record.pop('data', None) for record in records]

        submission_records = [
            {'media': media, 'stream': stream and HttpBase64Reader(stream)}
            for media, stream in zip(records, streams)]

        medias = await self.manager.submit(submission_records)

        return web.json_response(medias)

    async def delete(self, request: web.Request) -> web.Response:
        ids = await get_request_ids(request)
        deletion_records = [{'id': id_} for id_ in ids]
        await self.manager.delete(deletion_records)

        return web.Response(status=200)
